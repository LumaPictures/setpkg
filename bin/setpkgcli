#!/usr/local/bin/python
import sys
import os

saved_stdout = sys.stdout

setpkg_dir = os.path.join(os.path.dirname(os.path.dirname(sys.argv[0])), 'python')
sys.path.insert(0, setpkg_dir)
#print >> sys.stderr, "setpkg_dir:", setpkg_dir
from setpkg import *
from setpkg import _splitname

import pprint
import argparse

#===============================================================================
# Formatter which prints some more information with the usage, for people
# used the old behavior of 'setpkg'
#===============================================================================
class ExtraUsageInfoFormatter(argparse.HelpFormatter):
    # Subclass and set this to something informative, and it will be appended
    # the usage string...
    extra_usage = ''''''
    
    def _format_usage(self, *args, **kwargs):
        return super(ExtraUsageInfoFormatter, self)._format_usage(*args, **kwargs) + self.extra_usage
        
class PkgHelpFormatter(ExtraUsageInfoFormatter):
    extra_usage = '''
For a list of all available packages: pkg ls --all
For a list of all currently set:      pkg ls
For help setting packages:            pkg set -h / setpkg -h
For help with other package commands: pkg -h
------------------------------------------------------------
'''
   


# start and stop parameters for effects
_effects = {'none': 0, 'black': 30, 'red': 31, 'green': 32, 'yellow': 33,
            'blue': 34, 'magenta': 35, 'cyan': 36, 'white': 37, 'bold': 1,
            'italic': 3, 'underline': 4, 'inverse': 7,
            'black_background': 40, 'red_background': 41,
            'green_background': 42, 'yellow_background': 43,
            'blue_background': 44, 'purple_background': 45,
            'cyan_background': 46, 'white_background': 47}

def render_effects(text, effects):
    'Wrap text in commands to turn on each effect.'
    if not text:
        return text
    start = [str(_effects[e]) for e in ['none'] + effects.split()]
    start = '\033[' + ';'.join(start) + 'm'
    stop = '\033[' + str(_effects['none']) + 'm'
    return ''.join([start, text, stop])

def _get_shell(shell, *args, **kwargs):
    try:
        cls = get_shell_class(shell)
        return cls(*args, **kwargs)
    except KeyError, e:
        logger.error('unknown shell: %s (%s)' % (shell, e.args[0]))
        sys.exit(1)
  
def command(value):
    saved_stdout.write(value + '\n')

# TODO: move this to the Shell class
def error(value):
    sys.__stderr__.write('%s\n' % value)

# using this kills whitespace formatting!
def status(value):
    saved_stdout.write('echo "%s";\n' % value)


def list_packages(args):
    if args.all:
        for pkg in Session.list_package_choices(args.packages,
                                              versions=not args.base,
                                              aliases=args.aliases,
                                              regexp=not args.no_regexp):
            status(pkg)
    else:
        for pkg in Session.list_active_packages(args.packages, args.pid):
            status(pkg)

def doit(func, args):
    set_global = platform.system() == 'Windows' and args.set_global
    shell = _get_shell(args.shell, set_global=set_global)
    logger.debug('setpkg start %s' % (args.packages,))
    try:
        changed, removed = func()
    except PackageError, err:
        sys.stderr.write(str(err) + '\n')
        sys.exit(0)
    except Exception, err:
        import traceback
        logger.error(traceback.format_exc())
        traceback.print_exc(file=sys.stderr)
        sys.exit(0)
    logger.debug('changed variables: %s' % (sorted(changed),))
    cmds = []
    for name, value in changed.iteritems():
        cmds.append(shell.setenv(name, value))
    for name in removed:
        cmds.append(shell.unsetenv(name))
    
    for cmd in cmds:
        command(cmd)
        logger.debug(cmd)

def set_packages(args):
    def f():
        return setpkg(args.packages, force=args.reload, pid=args.pid)
    doit(f, args)

def unset_packages(args):
    def f():
        if args.all:
            packages = Session.list_active_packages(pid=args.pid)
        else:
            packages = args.packages
        return unsetpkg(packages, pid=args.pid, recurse=args.recurse)
    doit(f, args)

def run_package(args):
    args.packages = args.package
    args.reload = False
    set_packages(args)
    # Because we know we won't be modifying anything with this session / package,
    # ok to use os.environ for speed (to avoid copy of environ)
    package = Session(environ=os.environ).get_package(args.package[0])
    runcmd = [package.executable]
    if args.runargs:
        runcmd.extend(args.runargs)
    command(' '.join(runcmd))

def info(args):
    # use raw os.environ for speed
    session = Session(environ=os.environ, pid=args.pid)
    
    shortname, version = _splitname(args.package[0])
    curr_version = session.current_version(shortname)
    if curr_version is None:
        package = session.get_package(args.package[0])
    else:
        package = session.storage[shortname]

    def detail(*data, **kwargs):
        colors = kwargs.get('colors', ('cyan',))
        default_color = kwargs.get('default_color', None)
        if len(colors) < len(data):
            colors += ( (default_color,) * (len(data) - len(colors)) )

        widths = kwargs.get('widths', (20, 30))
        default_width = kwargs.get('default_width', 20)
        if len(widths) < len(data):
            widths += ( (default_width,) * (len(data) - len(widths)) )
        
        data = list(data)
        if data and data[0]:
            data[0] += ':'
        line = ''
        for d, w, c in zip(data, widths, colors):
            d = d.ljust(w)
            if c:
                d = render_effects(d, c)
            line += d
        # user error to avoid removing whitespace formatting
        error(line)
    
    def table(section, labels, columns, **kwargs):
        detail(section, default_color='blue', *['[%s]' % label for label in labels])
        for data in columns:
            detail('', *data, **kwargs)
        status('')

    if version:
        # resolve alias to real version
        version = package.aliases.get(version, version)
        aliases = dict([(a, v) for a,v in package.aliases.items() if v==version])
    else:
        aliases = package.aliases
    defaultVer = package.default_version
    defaultVer = aliases.get(defaultVer, defaultVer)   

    detail('name', package.name)
    detail('executable', package.executable)
    detail('versions', ', '.join(session.list_package_versions(package, regexp=True)))
    detail('default version', str(defaultVer))
    detail('subpackages', ', '.join(package.subpackages))
    detail('dependencies', ', '.join([pkg.origname for pkg in package.get_dependencies()]))
    
    if curr_version:
        detail('dependents', ', '.join([pkg.origname for pkg in package.get_dependents()]))
    else:
        detail('dependents', '<inactive>', default_color='red')

    if curr_version:
        detail('active version', curr_version)
    else:
        detail('active_version', '<inactive>', default_color='red')
    status('')
    
    sys_aliases = package.system_aliases
    if sys_aliases:
        table('run commands',
              ['command', 'action'],
              [(sys_alias, 'runpkg %s' % pkgname) for sys_alias, pkgname in sys_aliases])
    else:
        detail('aliases', '<none>')
        status('')

    if aliases:
        table('package aliases',
              ['alias', 'package'],
              [(alias, aliases[alias]) for alias in sorted(aliases)])
    
    if curr_version:

        vals = []
        for name, var in sorted( package.environ_vars().items() ):
            if name.startswith('SETPKG_'):
                continue
            var_vals = []
            for action in var._actions:
                # Start with the name of the variable if we haven't said it yet
                if not var_vals:
                    var_name = name
                else:
                    var_name = ''
                    
                # then the action...
                action_name = type(action).__name__
                
                # then the value associated with that action - if it's set,
                # we didn't store the exact value we set it to, so just use
                # the current value
                if type(action) == Set:
                    val = '(?) ' + os.environ.get(name, '<UNSET>')
                else:
                    val = action.undo_data
                var_vals.append( (var_name, action_name, val) )
            vals.extend(var_vals)
        table('variables',
              ['variable', 'action', 'value'],
              vals, widths=(20,30,11))
    else:
        detail('variables', '<inactive>', default_color='red')

def alias(args):
    # use raw os.environ for speed
    session = Session(environ=os.environ, pid=args.pid)
    package_files = sorted(session.walk_package_files())
    
    shell = _get_shell(args.shell)
    for package_file in package_files:
        try:
            pkg = Package(package_file, session=session)
            for sys_alias, cmd in pkg.system_aliases:
                status('alias %s = %r' % (sys_alias, cmd))
                command(shell.alias(sys_alias, cmd))
        except PackageError, err:
            pass
        except Exception:
            logger.error('Unknown error reading aliases for package %s:' % package_file)
            import traceback
            logger.error(traceback.format_exc())

def env(args):
    shell = _get_shell(args.shell)
    var = args.variable[0]
    value = args.value
    if args.action == 'prepend':
        if value is None:
            logger.error("error: provide a value to prepend")
            sys.exit(1)
        prependenv(var, value)
        cmd = shell.setenv(var, os.environ[var])
    elif args.action == 'pop':
        popenv(var, value)
        val = os.environ[var]
        if val:
            cmd = shell.setenv(var, os.environ[var])
        else:
            cmd = shell.unsetenv(var)
    elif args.action == 'set':
        if value is None:
            logger.error("error: provide a value to set")
            sys.exit(1)
        cmd = shell.setenv(var, value)
    elif args.action == 'unset':
        cmd = shell.unsetenv(var)
    else:
        raise
    command(cmd)
     
def cli():
    logger.debug(str(sys.argv))

    parser = argparse.ArgumentParser(
        prog='pkg',
        usage='%(prog)s [options]',
        description='Manage environment variables for a software package.')
    
    parser.add_argument('--pid', metavar='PID', type=str, nargs='?',
                       help='current process id (usually stored in $$)')

    parser.add_argument('--shell', metavar='SHELL', type=str, nargs='?',
                       help='the shell from which this is run. (options are %s)' % ', '.join(shells.keys()))

    subparsers = parser.add_subparsers(help='actions to perform', dest='subparser')
    #--- set -----------
    set_parser = subparsers.add_parser('set', help='add packages')

    set_parser.add_argument('packages', metavar='PACKAGE', type=str, nargs='+',
                       help='packages to add or remove')

    set_parser.add_argument('-f', '--force', '--reload', dest='reload', action='store_true',
                       help='set packages even if already set')

    if platform.system() == 'Windows':
        set_parser.add_argument('-g', '--global', dest='set_global', action='store_true',
                           help='set environment for all sessions until system restart')

    set_parser.set_defaults(func=set_packages)
    set_parser.formatter_class = PkgHelpFormatter

    #--- unset -----------
    unset_parser = subparsers.add_parser('unset', help='remove packages')

    unset_parser.add_argument('packages', metavar='PACKAGE', type=str, nargs='*',
                       help='packages to add or remove')

    unset_parser.add_argument('--all', '-a', dest='all', action='store_true',
                       help='unset all currently active packages')

    unset_parser.add_argument('--recurse', '-r', action='store_true',
                       help='recursively unset dependencies of this package')

    if platform.system() == 'Windows':
        unset_parser.add_argument('-g', '--global', dest='set_global', action='store_true',
                                  help='unset environment for all sessions until system restart')

    unset_parser.set_defaults(func=unset_packages)

    #--- list -----------
    list_parser = subparsers.add_parser('ls', help='list packages')

    list_parser.add_argument('packages', metavar='PACKAGE', type=str, nargs='?',
                           help='packages to add or remove')

    list_parser.add_argument('--all', dest='all', action='store_true',
                       help='list all packages')

    list_parser.add_argument('--base', '-b', dest='base', action='store_true',
                       help='list only base packages without version')

    list_parser.add_argument('--aliases', dest='aliases', action='store_true',
                       help='include aliases')

    list_parser.add_argument('--no-regexp', action='store_true',
                       help='include regexp (if enabled for package)')

    list_parser.set_defaults(func=list_packages)

    #--- run -----------
    run_parser = subparsers.add_parser('run', help='run a package')
    run_parser.add_argument('package', metavar='PACKAGE', type=str, nargs=1,
                             help='package to run')
    # by setting no prefix_chars, all args are interepreted as positional,
    # and are caught by runargs, so that if you do:
    #   pkg run myPackage -myFlag
    # it will run
    #   myPackage -myFlag
    # ...instead of trying to interpret myFlag as a flag for pkg
    run_parser.prefix_chars=''
    run_parser.add_argument('runargs', type=str, nargs='*',
                             help='package to run')
    run_parser.set_defaults(func=run_package)

    #--- info -----------
    info_parser = subparsers.add_parser('info', help='get information about a package')
    info_parser.add_argument('package', metavar='PACKAGE', type=str, nargs=1,
                             help='package to query')
    info_parser.set_defaults(func=info)

    #--- aliases -----------
    alias_parser = subparsers.add_parser('system-alias', help='create system aliases for the current shell')
    alias_parser.set_defaults(func=alias)

    #--- env -----------
    env_parser = subparsers.add_parser('env', help='directly modify environment variables')

    env_parser.add_argument('action', metavar='ACTION', type=str, choices=['prepend', 'pop', 'set', 'unset'],
                             help='action to perform')
    env_parser.add_argument('variable', metavar='VAR', type=str, nargs=1,
                             help='variable to modify')
    env_parser.add_argument('value', metavar='VALUE', type=str, nargs='?',
                             help='value to set')
    env_parser.set_defaults(func=env)

    # monkeypatch with a helper that prints to stderr so we don't eval it
    def __call__(self, parser, namespace, values, option_string=None):
        parser.print_help(sys.stderr)
        parser.exit()
    parser._registry_get('action', 'help').__call__ = __call__
    parser.formatter_class = PkgHelpFormatter

    args = parser.parse_args()

    args.func(args)

    logger.info('exiting')


try:
    # only result can go to stdout, so pipe all print statements to stderr
    sys.stdout = sys.stderr
    cli()
finally:
    sys.stdout = saved_stdout
